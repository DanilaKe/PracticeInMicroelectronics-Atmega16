
6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001eb  00000000  00000000  00000173  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ea  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000246  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a2  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e0  00000000  00000000  00000752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000832  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
DDRD = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
DDRC = 0xFF;
  70:	84 bb       	out	0x14, r24	; 20
DDRB = 0xFF;
  72:	87 bb       	out	0x17, r24	; 23
DDRA = 0xFF;
  74:	8a bb       	out	0x1a, r24	; 26
while(1)
{
	PORTA = 0xff;
  76:	7f ef       	ldi	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	29 e1       	ldi	r18, 0x19	; 25
  7a:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(5000);
	PORTA = 0x00;
	PORTA = 0b00000001;
  7c:	41 e0       	ldi	r20, 0x01	; 1
	PORTA = 0x00;
	PORTB = 0x00;
	PORTC = 0x00;
	PORTD = 0x00;
	_delay_ms(10000);
	PORTA = 0b00010000;
  7e:	60 e1       	ldi	r22, 0x10	; 16
	PORTB = 0b00101100;
  80:	5c e2       	ldi	r21, 0x2C	; 44
DDRC = 0xFF;
DDRB = 0xFF;
DDRA = 0xFF;
while(1)
{
	PORTA = 0xff;
  82:	7b bb       	out	0x1b, r23	; 27
  84:	80 e5       	ldi	r24, 0x50	; 80
  86:	93 ec       	ldi	r25, 0xC3	; 195
  88:	f9 01       	movw	r30, r18
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  90:	d9 f7       	brne	.-10     	; 0x88 <main+0x1c>
	_delay_ms(5000);
	PORTA = 0x00;
  92:	1b ba       	out	0x1b, r1	; 27
	PORTA = 0b00000001;
  94:	4b bb       	out	0x1b, r20	; 27
	PORTB = 0b00000001;
  96:	48 bb       	out	0x18, r20	; 24
	PORTC = 0b00000001;
  98:	45 bb       	out	0x15, r20	; 21
	PORTD = 0b00000001;
  9a:	42 bb       	out	0x12, r20	; 18
  9c:	80 e5       	ldi	r24, 0x50	; 80
  9e:	93 ec       	ldi	r25, 0xC3	; 195
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d9 f7       	brne	.-10     	; 0xa0 <main+0x34>
	_delay_ms(5000);
	PORTA = 0x00;
  aa:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;
  ac:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;
  ae:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
  b0:	12 ba       	out	0x12, r1	; 18
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	9f ef       	ldi	r25, 0xFF	; 255
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <main+0x4a>
	_delay_ms(10000);
	PORTA = 0b00010000;
  c0:	6b bb       	out	0x1b, r22	; 27
	PORTB = 0b00101100;
  c2:	58 bb       	out	0x18, r21	; 24
	PORTC = 0b00101100;
  c4:	55 bb       	out	0x15, r21	; 21
	PORTD = 0b00010000;
  c6:	62 bb       	out	0x12, r22	; 18
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	9f ef       	ldi	r25, 0xFF	; 255
  cc:	f9 01       	movw	r30, r18
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d9 f7       	brne	.-10     	; 0xcc <main+0x60>
	_delay_ms(10000);
	PORTA = 0x00;
  d6:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;
  d8:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;
  da:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
  dc:	12 ba       	out	0x12, r1	; 18
  de:	d1 cf       	rjmp	.-94     	; 0x82 <main+0x16>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
