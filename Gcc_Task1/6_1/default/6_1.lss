
6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000313  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ea  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000056e  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a6  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000007a0  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
  be:	5f 92       	push	r5
  c0:	6f 92       	push	r6
  c2:	7f 92       	push	r7
  c4:	8f 92       	push	r8
  c6:	9f 92       	push	r9
  c8:	af 92       	push	r10
  ca:	bf 92       	push	r11
  cc:	cf 92       	push	r12
  ce:	df 92       	push	r13
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
	DDRD = 0x00;
  d8:	11 ba       	out	0x11, r1	; 17
	DDRC = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xFF;
  de:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;
  e0:	8a bb       	out	0x1a, r24	; 26
	while(1)
	{
		if(PIND&(1 << PD0))
		{
		DDRD = 0xFF;
  e2:	4f ef       	ldi	r20, 0xFF	; 255
		PORTA = 0b00111100;
  e4:	ac e3       	ldi	r26, 0x3C	; 60
		PORTB = 0b01000010;
  e6:	72 e4       	ldi	r23, 0x42	; 66
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e8:	29 e1       	ldi	r18, 0x19	; 25
  ea:	30 e0       	ldi	r19, 0x00	; 0
		DDRD = 0x00;
		}
		if(PIND&(1 << PD1))
		{
		DDRD = 0xFF;
		PORTA = 0b01001000;
  ec:	68 e4       	ldi	r22, 0x48	; 72
  ee:	56 2e       	mov	r5, r22
		PORTB = 0b01000100;
  f0:	54 e4       	ldi	r21, 0x44	; 68
  f2:	d5 2e       	mov	r13, r21
		PORTC = 0b01111110;
  f4:	9e e7       	ldi	r25, 0x7E	; 126
  f6:	e9 2e       	mov	r14, r25
		PORTD = 0b01000000;
  f8:	80 e4       	ldi	r24, 0x40	; 64
  fa:	68 2e       	mov	r6, r24
		}
		if(PIND&(1 << PD2))
		{
		DDRD = 0xFF;
		PORTA = 0b01000100;
		PORTB = 0b01100010;
  fc:	02 e6       	ldi	r16, 0x62	; 98
  fe:	f0 2e       	mov	r15, r16
		PORTC = 0b01010010;
 100:	62 e5       	ldi	r22, 0x52	; 82
		PORTD = 0b01001100;
 102:	1c e4       	ldi	r17, 0x4C	; 76
 104:	81 2e       	mov	r8, r17
		DDRD = 0x00;
		}
		if(PIND&(1 << PD3))
		{
		DDRD = 0xFF;
		PORTA = 0b00100100;
 106:	54 e2       	ldi	r21, 0x24	; 36
		PORTB = 0b01000010;
		PORTC = 0b01011010;
 108:	ba e5       	ldi	r27, 0x5A	; 90
 10a:	7b 2e       	mov	r7, r27
		DDRD = 0x00;
		}
		if(PIND&(1 << PD4))
		{
		DDRD = 0xFF;
		PORTA = 0b00001110;
 10c:	1e e0       	ldi	r17, 0x0E	; 14
		PORTB = 0b00001000;
 10e:	08 e0       	ldi	r16, 0x08	; 8
		DDRD = 0x00;
		}
		if(PIND&(1 << PD5))
		{
		DDRD = 0xFF;
		PORTA = 0b00101110;
 110:	fe e2       	ldi	r31, 0x2E	; 46
 112:	9f 2e       	mov	r9, r31
		PORTB = 0b01001010;
 114:	ba e4       	ldi	r27, 0x4A	; 74
		PORTC = 0b01001010;
		PORTD = 0b00110010;
 116:	e2 e3       	ldi	r30, 0x32	; 50
 118:	be 2e       	mov	r11, r30
		DDRD = 0x00;
		}
		if(PIND&(1 << PD7))
		{
		DDRD = 0xFF;
		PORTA = 0b00000010;
 11a:	92 e0       	ldi	r25, 0x02	; 2
 11c:	a9 2e       	mov	r10, r25
		PORTB = 0b01100010;
		PORTC = 0b00010010;
 11e:	82 e1       	ldi	r24, 0x12	; 18
 120:	c8 2e       	mov	r12, r24
	DDRC = 0xFF;
	DDRB = 0xFF;
	DDRA = 0xFF;
	while(1)
	{
		if(PIND&(1 << PD0))
 122:	80 9b       	sbis	0x10, 0	; 16
 124:	11 c0       	rjmp	.+34     	; 0x148 <main+0x8a>
		{
		DDRD = 0xFF;
 126:	41 bb       	out	0x11, r20	; 17
		PORTA = 0b00111100;
 128:	ab bb       	out	0x1b, r26	; 27
		PORTB = 0b01000010;
 12a:	78 bb       	out	0x18, r23	; 24
		PORTC = 0b01000010;
 12c:	75 bb       	out	0x15, r23	; 21
		PORTD = 0b00111100;
 12e:	a2 bb       	out	0x12, r26	; 18
 130:	80 e5       	ldi	r24, 0x50	; 80
 132:	93 ec       	ldi	r25, 0xC3	; 195
 134:	f9 01       	movw	r30, r18
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x78>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13c:	d9 f7       	brne	.-10     	; 0x134 <main+0x76>
		_delay_ms(5000);
		PORTA = 0x00;
 13e:	1b ba       	out	0x1b, r1	; 27
		PORTB = 0x00;
 140:	18 ba       	out	0x18, r1	; 24
		PORTC = 0x00;
 142:	15 ba       	out	0x15, r1	; 21
		PORTD = 0x00;
 144:	12 ba       	out	0x12, r1	; 18
		DDRD = 0x00;
 146:	11 ba       	out	0x11, r1	; 17
		}
		if(PIND&(1 << PD1))
 148:	81 9b       	sbis	0x10, 1	; 16
 14a:	11 c0       	rjmp	.+34     	; 0x16e <main+0xb0>
		{
		DDRD = 0xFF;
 14c:	41 bb       	out	0x11, r20	; 17
		PORTA = 0b01001000;
 14e:	5b ba       	out	0x1b, r5	; 27
		PORTB = 0b01000100;
 150:	d8 ba       	out	0x18, r13	; 24
		PORTC = 0b01111110;
 152:	e5 ba       	out	0x15, r14	; 21
		PORTD = 0b01000000;
 154:	62 ba       	out	0x12, r6	; 18
 156:	80 e5       	ldi	r24, 0x50	; 80
 158:	93 ec       	ldi	r25, 0xC3	; 195
 15a:	f9 01       	movw	r30, r18
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 160:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 162:	d9 f7       	brne	.-10     	; 0x15a <main+0x9c>
		_delay_ms(5000);
		PORTA = 0x00;
 164:	1b ba       	out	0x1b, r1	; 27
		PORTB = 0x00;
 166:	18 ba       	out	0x18, r1	; 24
		PORTC = 0x00;
 168:	15 ba       	out	0x15, r1	; 21
		PORTD = 0x00;
 16a:	12 ba       	out	0x12, r1	; 18
		DDRD = 0x00;
 16c:	11 ba       	out	0x11, r1	; 17
		}
		if(PIND&(1 << PD2))
 16e:	82 9b       	sbis	0x10, 2	; 16
 170:	11 c0       	rjmp	.+34     	; 0x194 <main+0xd6>
		{
		DDRD = 0xFF;
 172:	41 bb       	out	0x11, r20	; 17
		PORTA = 0b01000100;
 174:	db ba       	out	0x1b, r13	; 27
		PORTB = 0b01100010;
 176:	f8 ba       	out	0x18, r15	; 24
		PORTC = 0b01010010;
 178:	65 bb       	out	0x15, r22	; 21
		PORTD = 0b01001100;
 17a:	82 ba       	out	0x12, r8	; 18
 17c:	80 e5       	ldi	r24, 0x50	; 80
 17e:	93 ec       	ldi	r25, 0xC3	; 195
 180:	f9 01       	movw	r30, r18
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 186:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 188:	d9 f7       	brne	.-10     	; 0x180 <main+0xc2>
		_delay_ms(5000);
		PORTA = 0x00;
 18a:	1b ba       	out	0x1b, r1	; 27
		PORTB = 0x00;
 18c:	18 ba       	out	0x18, r1	; 24
		PORTC = 0x00;
 18e:	15 ba       	out	0x15, r1	; 21
		PORTD = 0x00;
 190:	12 ba       	out	0x12, r1	; 18
		DDRD = 0x00;
 192:	11 ba       	out	0x11, r1	; 17
		}
		if(PIND&(1 << PD3))
 194:	83 9b       	sbis	0x10, 3	; 16
 196:	11 c0       	rjmp	.+34     	; 0x1ba <main+0xfc>
		{
		DDRD = 0xFF;
 198:	41 bb       	out	0x11, r20	; 17
		PORTA = 0b00100100;
 19a:	5b bb       	out	0x1b, r21	; 27
		PORTB = 0b01000010;
 19c:	78 bb       	out	0x18, r23	; 24
		PORTC = 0b01011010;
 19e:	75 ba       	out	0x15, r7	; 21
		PORTD = 0b00100100;
 1a0:	52 bb       	out	0x12, r21	; 18
 1a2:	80 e5       	ldi	r24, 0x50	; 80
 1a4:	93 ec       	ldi	r25, 0xC3	; 195
 1a6:	f9 01       	movw	r30, r18
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <main+0xe8>
		_delay_ms(5000);
		PORTA = 0x00;
 1b0:	1b ba       	out	0x1b, r1	; 27
		PORTB = 0x00;
 1b2:	18 ba       	out	0x18, r1	; 24
		PORTC = 0x00;
 1b4:	15 ba       	out	0x15, r1	; 21
		PORTD = 0x00;
 1b6:	12 ba       	out	0x12, r1	; 18
		DDRD = 0x00;
 1b8:	11 ba       	out	0x11, r1	; 17
		}
		if(PIND&(1 << PD4))
 1ba:	84 9b       	sbis	0x10, 4	; 16
 1bc:	11 c0       	rjmp	.+34     	; 0x1e0 <main+0x122>
		{
		DDRD = 0xFF;
 1be:	41 bb       	out	0x11, r20	; 17
		PORTA = 0b00001110;
 1c0:	1b bb       	out	0x1b, r17	; 27
		PORTB = 0b00001000;
 1c2:	08 bb       	out	0x18, r16	; 24
		PORTC = 0b00001000;
 1c4:	05 bb       	out	0x15, r16	; 21
		PORTD = 0b01111110;
 1c6:	e2 ba       	out	0x12, r14	; 18
 1c8:	80 e5       	ldi	r24, 0x50	; 80
 1ca:	93 ec       	ldi	r25, 0xC3	; 195
 1cc:	f9 01       	movw	r30, r18
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x110>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <main+0x10e>
		_delay_ms(5000);
		PORTA = 0x00;
 1d6:	1b ba       	out	0x1b, r1	; 27
		PORTB = 0x00;
 1d8:	18 ba       	out	0x18, r1	; 24
		PORTC = 0x00;
 1da:	15 ba       	out	0x15, r1	; 21
		PORTD = 0x00;
 1dc:	12 ba       	out	0x12, r1	; 18
		DDRD = 0x00;
 1de:	11 ba       	out	0x11, r1	; 17
		}
		if(PIND&(1 << PD5))
 1e0:	85 9b       	sbis	0x10, 5	; 16
 1e2:	11 c0       	rjmp	.+34     	; 0x206 <main+0x148>
		{
		DDRD = 0xFF;
 1e4:	41 bb       	out	0x11, r20	; 17
		PORTA = 0b00101110;
 1e6:	9b ba       	out	0x1b, r9	; 27
		PORTB = 0b01001010;
 1e8:	b8 bb       	out	0x18, r27	; 24
		PORTC = 0b01001010;
 1ea:	b5 bb       	out	0x15, r27	; 21
		PORTD = 0b00110010;
 1ec:	b2 ba       	out	0x12, r11	; 18
 1ee:	80 e5       	ldi	r24, 0x50	; 80
 1f0:	93 ec       	ldi	r25, 0xC3	; 195
 1f2:	f9 01       	movw	r30, r18
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x136>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fa:	d9 f7       	brne	.-10     	; 0x1f2 <main+0x134>
		_delay_ms(5000);
		PORTA = 0x00;
 1fc:	1b ba       	out	0x1b, r1	; 27
		PORTB = 0x00;
 1fe:	18 ba       	out	0x18, r1	; 24
		PORTC = 0x00;
 200:	15 ba       	out	0x15, r1	; 21
		PORTD = 0x00;
 202:	12 ba       	out	0x12, r1	; 18
		DDRD = 0x00;
 204:	11 ba       	out	0x11, r1	; 17
		}
		if(PIND&(1 << PD6))
 206:	86 9b       	sbis	0x10, 6	; 16
 208:	11 c0       	rjmp	.+34     	; 0x22c <main+0x16e>
		{
		DDRD = 0xFF;
 20a:	41 bb       	out	0x11, r20	; 17
		PORTA = 0b00111100;
 20c:	ab bb       	out	0x1b, r26	; 27
		PORTB = 0b01010010;
 20e:	68 bb       	out	0x18, r22	; 24
		PORTC = 0b01010010;
 210:	65 bb       	out	0x15, r22	; 21
		PORTD = 0b00100100;
 212:	52 bb       	out	0x12, r21	; 18
 214:	80 e5       	ldi	r24, 0x50	; 80
 216:	93 ec       	ldi	r25, 0xC3	; 195
 218:	f9 01       	movw	r30, r18
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0x15c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 220:	d9 f7       	brne	.-10     	; 0x218 <main+0x15a>
		_delay_ms(5000);
		PORTA = 0x00;
 222:	1b ba       	out	0x1b, r1	; 27
		PORTB = 0x00;
 224:	18 ba       	out	0x18, r1	; 24
		PORTC = 0x00;
 226:	15 ba       	out	0x15, r1	; 21
		PORTD = 0x00;
 228:	12 ba       	out	0x12, r1	; 18
		DDRD = 0x00;
 22a:	11 ba       	out	0x11, r1	; 17
		}
		if(PIND&(1 << PD7))
 22c:	87 9b       	sbis	0x10, 7	; 16
 22e:	79 cf       	rjmp	.-270    	; 0x122 <main+0x64>
		{
		DDRD = 0xFF;
 230:	41 bb       	out	0x11, r20	; 17
		PORTA = 0b00000010;
 232:	ab ba       	out	0x1b, r10	; 27
		PORTB = 0b01100010;
 234:	f8 ba       	out	0x18, r15	; 24
		PORTC = 0b00010010;
 236:	c5 ba       	out	0x15, r12	; 21
		PORTD = 0b00001110;
 238:	12 bb       	out	0x12, r17	; 18
 23a:	80 e5       	ldi	r24, 0x50	; 80
 23c:	93 ec       	ldi	r25, 0xC3	; 195
 23e:	f9 01       	movw	r30, r18
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 244:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 246:	d9 f7       	brne	.-10     	; 0x23e <main+0x180>
		_delay_ms(5000);
		PORTA = 0x00;
 248:	1b ba       	out	0x1b, r1	; 27
		PORTB = 0x00;
 24a:	18 ba       	out	0x18, r1	; 24
		PORTC = 0x00;
 24c:	15 ba       	out	0x15, r1	; 21
		PORTD = 0x00;
 24e:	12 ba       	out	0x12, r1	; 18
		DDRD = 0x00;
 250:	11 ba       	out	0x11, r1	; 17
 252:	67 cf       	rjmp	.-306    	; 0x122 <main+0x64>

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
